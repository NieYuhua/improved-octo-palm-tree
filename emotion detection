# -*- coding: utf-8 -*-
"""
Created on Fri Jul 10 16:22:16 2020

@author: 尘心CR7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
##%matplotlib inline

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier

import xgboost as xgb

import warnings
warnings.filterwarnings('ignore')

import os
os.listdir(r'C:\Users\12270\Desktop\summer_deeplearning')

brainwave_df = pd.read_csv(r'C:\Users\12270\Desktop\summer_deeplearning/emotions.csv')

label_df = brainwave_df['label']
brainwave_df.drop('label', axis = 1, inplace=True)

##%%time

pl_log_reg = Pipeline(steps=[('scaler',StandardScaler()),
                             ('log_reg', LogisticRegression(penalty='l2',multi_class='multinomial', solver='sag',class_weight='balanced', max_iter=200))])
scores = cross_val_score(pl_log_reg, brainwave_df, label_df, cv=10,scoring='accuracy')
print('Accuracy for Logistic Regression: ', scores.mean())

# -*-coding:utf-8-*-
from sklearn.metrics import confusion_matrix


#labels表示你不同类别的代号，比如这里的demo中有13个类别
labels = ['positive', 'negative', 'neutron']



y_true = label_df
y_pred = pl_log_reg.fit(brainwave_df, label_df).predict(brainwave_df)
print(y_pred)
print(y_true)
tick_marks = np.array(range(len(labels))) + 0.5

def plot_confusion_matrix(cm, title='Confusion Matrix', cmap=plt.cm.binary):
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    xlocations = np.array(range(len(labels)))
    plt.xticks(xlocations, labels, rotation=90)
    plt.yticks(xlocations, labels)
    plt.ylabel('True label')
    plt.xlabel('Predicted label')


cm = confusion_matrix(y_true, y_pred)
np.set_printoptions(precision=2)
cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
print (cm_normalized)
plt.figure(figsize=(12, 8), dpi=120)

ind_array = np.arange(len(labels))
x, y = np.meshgrid(ind_array, ind_array)

for x_val, y_val in zip(x.flatten(), y.flatten()):
    c = cm_normalized[y_val][x_val]
    if c > 0.01:
        plt.text(x_val, y_val, "%0.2f" % (c,), color='red', fontsize=7, va='center', ha='center')
# offset the tick
plt.gca().set_xticks(tick_marks, minor=True)
plt.gca().set_yticks(tick_marks, minor=True)
plt.gca().xaxis.set_ticks_position('none')
plt.gca().yaxis.set_ticks_position('none')
plt.grid(True, which='minor', linestyle='-')
plt.gcf().subplots_adjust(bottom=0.15)

plot_confusion_matrix(cm_normalized, title='Normalized confusion matrix')
# show confusion matrix
plt.savefig(r'C:\Users\12270\Desktop\summer_deeplearning\result1', format='png')
plt.show()

